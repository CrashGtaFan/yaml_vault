#!/usr/bin/env ruby

require 'yaml_vault'
require 'active_support/core_ext'
require 'thor'

class YamlVault::Cli < Thor
  include Thor::Actions

  class_option :key, aliases: "-k", type: :string, banner: "KEYNAME (format: \"KEY1.INNER_KEY,KEY2\")", desc: "target key", default: "vault"
  class_option :salt, aliases: "-s", type: :string
  class_option :cipher, type: :string, desc: "Encrypt cipher (see. OpenSSL::Cipher.ciphers)", default: "aes-256-cbc"
  class_option :digest, type: :string, desc: "Sign digest algorithm (see. OpenSSL::Digest.constants)", default: "SHA256"
  class_option :use_sign_passphrase, type: :boolean, default: false

  desc "encrypt YAML_FILE", "Encrypt yaml file"
  method_option :output, aliases: "-o", type: :string, required: true
  def encrypt(yaml_file)
    passphrase, sign_passphrase = get_passphrase
    encrypted_yaml = YamlVault::Main.new(
      yaml_file,
      target_keys,
      passphrase: passphrase,
      sign_passphrase: sign_passphrase,
      salt: options[:salt], cipher: options[:cipher], digest: options[:digest]
    ).encrypt_yaml
    puts "encrypted #{yaml_file} -> #{options[:output]}"
    File.open(options[:output], "w") { |f| f.write encrypted_yaml }
  end

  desc "decrypt YAML_FILE", "Decrypt yaml file"
  method_option :output, aliases: "-o", type: :string, required: true
  def decrypt(yaml_file)
    passphrase, sign_passphrase = get_passphrase
    decrypted_yaml = YamlVault::Main.new(
      yaml_file,
      target_keys,
      passphrase: passphrase,
      sign_passphrase: sign_passphrase,
      salt: options[:salt], cipher: options[:cipher], digest: options[:digest]
    ).decrypt_yaml
    puts "decrypted #{yaml_file} -> #{options[:output]}"
    File.open(options[:output], "w") { |f| f.write decrypted_yaml }
  end

  private

  def get_passphrase
    passphrase = ENV["YAML_VAULT_PASSPHRASE"] || ask("Enter passphrase:", echo: false)
    puts "\n"
    if ENV["YAML_VAULT_SIGN_PASSPHRASE"]
      sign_passphrase = ENV["YAML_VAULT_SIGN_PASSPHRASE"]
    elsif options[:use_sign_passphrase]
      sign_passphrase = ask("Enter sign passphrase:", echo: false)
      puts "\n"
    else
      sign_passphrase = nil
    end

    raise "Please input passphrase" if passphrase.blank?

    return passphrase, sign_passphrase
  end

  def target_keys
    options[:key] ? options[:key].split(/,\s?/).map { |k| k.split(".") } : ["vault"]
  end
end

YamlVault::Cli.start
